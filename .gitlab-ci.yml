## Copyright 2009-2022 Intel Corporation
## SPDX-License-Identifier: Apache-2.0

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  OSPRAY_VER: "2.9.0"
  RKCOMMON_VER: "1.9.0"
  PYTHON_VERSION: "3.9.7"
  # PYTHON_ROOT_MACOS: "/NAS/packages/apps/python/$PYTHON_VERSION/macos"
  PYTHON_ROOT_WINDOWS: "N:/packages/apps/python/$PYTHON_VERSION/windows"

stages:
  - build
  - test
  - release
  - scan

.centos7:
  tags: [ build, docker, modules ]
  image: $DOCKER_REGISTRY/centos:7-devel
  before_script:
    - module load python/$PYTHON_VERSION
    - echo $Python3_ROOT
    - ls $Python3_ROOT

.ubuntu18.04:
  tags: [ build, docker, modules ]
  image: $DOCKER_REGISTRY/ubuntu:18.04
  before_script:
    - module load python/$PYTHON_VERSION
    - echo $Python3_ROOT
    - ls $Python3_ROOT

.ubuntu20.04:
  tags: [ build, docker ]
  image: $DOCKER_REGISTRY/clamav:ubuntu20.04

.macos:
  tags: [ osx, clang ]

.macos-sign:
  tags: [ osx, clang, sign ]

.windows:
  tags: [ win, msvc15 ]
  before_script:
    - $env:Python3_ROOT = $PYTHON_ROOT_WINDOWS
    - echo $env:Python3_ROOT
    - ls $env:Python3_ROOT

.linux-build-artifacts:
  artifacts:
    name: ospray_studio
    paths:
      - build/

.macos-build-artifacts:
  artifacts:
    name: ospray-studio
    paths:
      - build-macos/

.windows-build-artifacts:
  artifacts:
    name: ospray-studio
    paths:
        - build-win/

.linux-release-artifacts:
  artifacts:
    name: ospray_studio
    paths:
      - build/package/ospray_studio*

.macos-release-artifacts:
  artifacts:
    name: ospray_studio
    paths:
      - build-macos/package/ospray_studio*

.windows-release-artifacts:
  artifacts:
    name: ospray_studio
    paths:
      - build-win/package/ospray_studio*

source-protex-scan:
  stage: scan
  image: amd64/openjdk:8
  script:
    - gitlab/source-scan-protex.sh
  tags: [docker]
  needs: []
  allow_failure: true

########
# These build phases will no longer work on current branches, due to non-release branch dependencies
########

build-centos7:
  stage: build
  extends:
    - .centos7
    - .linux-build-artifacts
  script:
    - module load intel/2020.1
    - export CC=icc
    - export CXX=icpc
    - export CXXFLAGS="-static-intel -static-libstdc++ -fPIC -D_GLIBCXX_USE_CXX11_ABI=0"
    - gitlab/build.sh

build-ubuntu18.04:
  stage: build
  extends:
    - .ubuntu18.04
    - .linux-build-artifacts
  script:
    - gitlab/build.sh
  only:
    - master
    - /^release-.*$/

build-macos-clang:
  stage: build
  extends:
    - .macos
    - .macos-build-artifacts
  script:
    - gitlab/macos.sh
  only:
    - master
    - /^release-.*$/

build-windows-msvc15:
  stage: build
  extends:
    - .windows
    - .windows-build-artifacts
  script:
    - gitlab\win.ps1
  only:
    - master
    - /^release-.*$/

build-kw:
  stage: build
  extends: .centos7
  script:
    - gitlab/build-kw.sh
  artifacts:
    paths:
      - klocwork/*
  only:
    - master
    - /^release-.*$/

test-run-centos7:
  stage: test
  extends: .centos7
  needs: [ build-centos7 ]
  script:
    - build/install/bin/ospStudio --verify_install

test-run-ubuntu18.04:
  stage: test
  extends: .ubuntu18.04
  needs: [ build-ubuntu18.04 ]
  script:
    - gitlab/run.sh
  only:
    - master
    - /^release-.*$/

test-kw:
  stage: scan
  extends: .centos7
  needs: [ build-kw ]
  script:
    - gitlab/kw-check-issues.sh
  allow_failure: true
  only:
    - master
    - /^release-.*$/

########
# Transitional phases, only works against devel branch dependencies
########

build-ubuntu18.04-dev:
  stage: build
  extends:
    - .ubuntu18.04
    - .linux-build-artifacts
  script:
    - gitlab/build-dev.sh

build-macos-clang-dev:
  stage: build
  extends:
    - .macos
    - .macos-build-artifacts
  script:
    - gitlab/macos-dev.sh

build-windows-msvc15-dev:
  stage: build
  extends:
    - .windows
    - .windows-build-artifacts
  script:
    - gitlab\win-dev.ps1

build-windows-icl:
  stage: build
  extends:
    - .windows
  script:
    - mkdir build-win-icl
    - cd build-win-icl
    - cmake -L .. -G "Visual Studio 16 2019" -T "Intel C++ Compiler 19.2" -DCMAKE_INSTALL_PREFIX="install"
    - cmake --build . --config Release --target install
  artifacts:
    paths:
        - build-win-icl
  when: manual

build-kw-dev:
  stage: build
  extends: .centos7
  script:
    - gitlab/build-kw-dev.sh
  artifacts:
    paths:
      - klocwork/*

test-kw-dev:
  stage: scan
  extends: .centos7
  needs: [build-kw-dev]
  script:
    - gitlab/kw-check-issues.sh
  allow_failure: true

kw-gen-report:
  stage: scan
  extends: .centos7
  needs: [build-kw-dev]
  script:
    - gitlab/kw-gen-report.sh
    - gitlab/store-files.sh $CI_PROJECT_NAME $CI_PIPELINE_ID klocwork "klocwork/report.log"
  artifacts:
    paths:
      - klocwork/report.log

test-run-ubuntu18.04-dev:
  stage: test
  extends: .ubuntu18.04
  needs: [ build-ubuntu18.04-dev ]
  script:
    - gitlab/run-dev.sh

release-ubuntu18.04:
  stage: release
  extends:
    - .ubuntu18.04
    - .linux-release-artifacts
  dependencies: []
  script:
   - gitlab/build.sh package

release-centos7:
  stage: release
  extends:
    - .centos7
    - .linux-release-artifacts
  needs: [ test-run-centos7 ]
  script:
    - module load intel/2020.1
    - export CC=icc
    - export CXX=icpc
    - export CXXFLAGS="-static-intel -static-libstdc++ -fPIC -D_GLIBCXX_USE_CXX11_ABI=0"
    - gitlab/build.sh package

release-windows:
  stage: release
  extends:
    - .windows
    - .windows-release-artifacts
  dependencies: []
  script:
    - gitlab\win.ps1 package

release-macos:
  stage: release
  extends:
    - .macos-sign
    - .macos-release-artifacts
  dependencies: []
  script:
   - gitlab/macos.sh package
  only:
    - master
    - /^release-.*$/
    - devel
    - web

scan-bdba-bin:
  stage: scan
  extends: .centos7
  needs: [release-centos7, release-windows, release-macos]
  script:
    - gitlab/bdba.sh "build*/package/ospray_studio*"
    - gitlab/store-files.sh $CI_PROJECT_NAME $CI_PIPELINE_ID bdba "ospray_studio*.pdf"
    - gitlab/store-files.sh $CI_PROJECT_NAME $CI_PIPELINE_ID bdba "ospray_studio*.csv"
  artifacts:
    paths:
      - ospray_studio*.pdf
      - ospray_studio*.csv
  only:
    - master
    - /^release-.*$/
    - devel

av:
  stage: scan
  extends: .ubuntu20.04
  needs: [release-centos7, release-windows, release-macos]
  script:
    - freshclam | tee -a /tmp/av_scan.log
    - clamscan -va --max-filesize=512M --max-scansize=2048M --alert-broken --alert-exceeds-max build*/package/ospray_studio* | tee -a /tmp/av_scan.log
    - gitlab/store-files.sh $CI_PROJECT_NAME $CI_PIPELINE_ID av /tmp/av_scan.log
  only:
    - master
    - /^release-.*$/
    - devel

