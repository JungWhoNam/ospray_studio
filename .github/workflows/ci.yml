
name: OSPRay Studio Main CI

# XXX This uses FetchContent on the other components' release packages
# XXX not their devel branches.

# Controls when the workflow will run
on:
  push:
# All branches
#    branches:
#      - '!**release**'
#      - '!master'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  ## Build Jobs ##
  ## Linux
  build-centos8:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: centos:8
      cmd: gitlab/build.sh
      artifact-out: build-centos8
      artifact-path: build

  build-ubuntu18-04:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: ubuntu:18.04
      cmd: gitlab/build.sh
      artifact-out: build-ubuntu18-04
      artifact-path: build

  build-ubuntu20-04:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: ubuntu:20.04
      cmd: gitlab/build.sh
      artifact-out: build-ubuntu20-04
      artifact-path: build

  build-ubuntu22-04:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: ubuntu:22.04
      cmd: gitlab/build.sh
      artifact-out: build-ubuntu22-04
      artifact-path: build

  build-arch:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: ospray/docker-images:arch
      cmd: gitlab/build.sh
      artifact-out: build-arch
      artifact-path: build

  build-rocky8-7:
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      force-delete: true    # guarantees .gitattributes are respected in working dir
      image: rockylinux:8.7
      cmd: |
        module load cmake/3.25.3
        module load intel/2023.0
        export CC=icx
        export CXX=icpx
        export CXXFLAGS="-fhonor-infinities -fhonor-nans"
        export CFLAGS=$CXXFLAGS
        export LDFLAGS="-static-intel"
        gitlab/build.sh
      artifact-out: build-rocky8-7
      artifact-path: build

  ## Dev Build Jobs ##
  ## Linux
  cache-ospray-rocky8-7:
    secrets: inherit
    uses: ./.github/workflows/cache-ospray.yml
    with:
      image: rockylinux:8.7
      ospray-version: devel
      rkcommon-version: devel

  build-rocky8-7-dev:
    needs: cache-ospray-rocky8-7
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: rockylinux:8.7
      cmd: |
        module load cmake/3.25.3
        module load intel/2022.1
        export CC=icx
        export CXX=icpx
        export CXXFLAGS="-fhonor-infinities -fhonor-nans"
        export CFLAGS=$CXXFLAGS
        export CACHE_DIR=${{ needs.cache-ospray-rocky8-7.outputs.cache-dir }}
        export OSPRAY_VER=${{ needs.cache-ospray-rocky8-7.outputs.ospray-version }}
        export CMAKE_PREFIX_PATH=$CACHE_DIR/ospray-$OSPRAY_VER/build/install
        export TBB_ROOT=$CACHE_DIR/ospray-$OSPRAY_VER/build/tbb/src/tbb
        cmake -L -S . -B build -DENABLE_OPENIMAGEIO=OFF -DENABLE_OPENVDB=OFF -DENABLE_EXR=OFF
        cmake --build build -- -j`nproc`
      artifact-path: build
      artifact-out: build-rocky8-7-dev

  ## MacOS
  build-macos-clang-dev:
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/macos.yml@main
    with:
      cmd: |
        gitlab/macos-dev.sh
      artifact-out: build-macos
      artifact-path: build-macos

  ## Windows
  build-windows-msvc15-dev:
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/windows.yml@main
    with:
      cmd: |
        $env:Python3_ROOT = "N:/packages/apps/python/3.9.7/windows"
        gitlab\win-dev.ps1
      artifact-out: build-windows
      artifact-path: build-win

  build-windows-msvc16:
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/windows.yml@main
    with:
      runs-on: '[ "Windows", "build", "NAS" ]'
      cmd: |
        cmake -L -S . -B build-win-msvc16 -G "Visual Studio 16 2019" -DCMAKE_INSTALL_PREFIX="install"
        cmake --build build-win-msvc16 --parallel $env:NUMBER_OF_PROCESSORS --config Release --target install

  ## Dev Test Jobs
  test-run-rocky8-7-dev:
    needs: build-rocky8-7-dev
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      # Run the rocky8-7-dev build on the ubuntu 18.04 image as a test, and because it has vncserver installed
      image: rockylinux:8.7-tgt-rebuild
      pre-cmd: yum -y install tigervnc-server mesa-libGLU
      cmd: |
        module load intel/2023.0
        build/ospStudio --verify_install
        export CACHE_DIR=/NAS/ci-cache
        export OSPRAY_VER=devel
        gitlab/run-dev.sh
        gitlab/run-dev-img-cmp.sh
      artifact-in: build-rocky8-7-dev
      artifact-path: build/model-results build/cert-tests/*
      artifact-out: test-run-rocky8-7-dev
      artifact-on-failure: true

  ### Devel Coverity Job ###
  static-analysis:
    needs: cache-ospray-rocky8-7
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/static_analysis.yml@devel
    with:
      coverity: true
      project: ospray_studio
      ignore-files: pysg.cpp
      prebuild: >
        module load cmake/3.25.3 &&
        export CACHE_DIR=${{ needs.cache-ospray-rocky8-7.outputs.cache-dir }} &&
        export OSPRAY_VER=${{ needs.cache-ospray-rocky8-7.outputs.ospray-version }} &&
        export CMAKE_PREFIX_PATH=$CACHE_DIR/ospray-$OSPRAY_VER/build/install &&
        export TBB_ROOT=$CACHE_DIR/ospray-$OSPRAY_VER/build/tbb/src/tbb &&
        cmake -L -S . -B build -DENABLE_OPENIMAGEIO=OFF -DENABLE_OPENVDB=OFF -DENABLE_EXR=OFF
      build: cmake --build build
