
name: OSPRay Studio Release

# XXX This uses FetchContent on the other components' release packages
# XXX not their devel branches.

# Controls when the workflow will run
on:
  push:
    branches:
      - devel
      - '**release**'
      - master
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

### Build Jobs ###

  ## Linux
  release-linux:
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      force-delete: true    # guarantees .gitattributes are respected in working dir
      image: rockylinux:8.7
      cmd: |
        module load cmake/3.15.2
        module load intel/2023.0
        export CC=icx
        export CXX=icpx
        export CXXFLAGS="-fhonor-infinities -fhonor-nans"
        export CFLAGS=$CXXFLAGS
        export LDFLAGS="-static-intel"
        gitlab/build.sh package
      artifact-out: release-linux
      artifact-path: build/package/ospray_studio*.gz

  ## Windows
  release-windows:
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/windows.yml@main
    with:
      runs-on: '[ "Windows", "build", "NAS" ]'
      cmd: |
        gitlab\win.ps1 package
        & $env:SIGN_FILE_WINDOWS $env:GITHUB_WORKSPACE\build-win\package\ospray_studio*.msi
      artifact-out: release-windows
      artifact-path: "build-win/package/ospray_studio*.zip build-win/package/ospray_studio*.msi"

  ## macOS
  release-macos:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/macos.yml@main
    with:
      runs-on: '[ "macOS", "sign", "x86_64" ]'
      cmd: |
        gitlab/macos.sh package
      artifact-out: release-macos
      artifact-path: "build-macos/package/ospray_studio*.zip build-macos/package/ospray_studio*.pkg"

### Test Releases ###
  ## Linux ##
  test-run-linux:
    needs: release-linux
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      # Run the rockylinux 8.7 build on the ubuntu 18.04 image as a test, and because it has vncserver installed
      image: ubuntu:18.04
      pre-cmd: apt install libglu1-mesa
      cmd: |
        module load intel/2023.0
        tar -xzf build/package/ospray_studio*.gz
        export PATH=$GITHUB_WORKSPACE/$(ls -d1 ./ospray_studio-*/bin):$PATH
        #export LD_LIBRARY_PATH=$GITHUB_WORKSPACE/$(ls -d1 ./ospray_studio-*/lib64):$LD_LIBRARY_PATH
        #gitlab/run.sh
        #echo ${LD_LIBRARY_PATH}
        #locate libGLU
        gitlab/run.sh
      artifact-in: release-linux

  ## Windows ##
  test-release-windows-zip:
    needs: release-windows
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/windows.yml@main
    with:
      cmd: |
        Expand-Archive $env:GITHUB_WORKSPACE\build-win\package\*.zip -DestinationPath .
        & $env:SIGN_FILE_WINDOWS -t (Get-ChildItem $env:GITHUB_WORKSPACE\ospray_studio-*\bin\* | Select-Object -Expand FullName)
      artifact-in: release-windows

  test-release-windows-msi:
    needs: release-windows
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/windows.yml@main
    with:
      cmd: |
        msiexec.exe /a (Get-ChildItem $env:GITHUB_WORKSPACE\build-win\package\*.msi | Select-Object -Expand FullName) /qn TARGETDIR=$env:GITHUB_WORKSPACE | Out-Null
        & $env:SIGN_FILE_WINDOWS -t $env:GITHUB_WORKSPACE\build-win\package\*.msi (Get-ChildItem "$env:GITHUB_WORKSPACE\Intel\OSPRay Studio v0\bin\*" | Select-Object -Expand FullName)
      artifact-in: release-windows

  ## macOS ##
  test-release-macos:
    needs: release-macos
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/macos.yml@main
    with:
      runs-on: '[ "macOS", "sign", "x86_64" ]'
      cmd: |
        unzip $GITHUB_WORKSPACE/build-macos/package/*.zip
        $SIGN_FILE_MAC -t $GITHUB_WORKSPACE/ospray_studio-*/bin/* $GITHUB_WORKSPACE/ospray_studio-*/lib/*.dylib $GITHUB_WORKSPACE/build-macos/package/*.pkg
      artifact-in: release-macos

### Scan Jobs ###

  cache-ospray:
    secrets: inherit
    uses: ./.github/workflows/cache-ospray.yml
    with:
      image: centos:7
      ospray-version: devel
      rkcommon-version: devel

  snyk-scan:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/snyk.yml@main

  static-analysis:
    needs: cache-ospray
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/static_analysis.yml@main
    with:
      coverity: true
      image: centos:7
      project: ospray_studio
      ignore-files: pysg.cpp
      prebuild: >
        module load cmake/3.15.2 &&
        export CACHE_DIR=${{ needs.cache-ospray.outputs.cache-dir }} &&
        export OSPRAY_VER=${{ needs.cache-ospray.outputs.ospray-version }} &&
        export CMAKE_PREFIX_PATH=$CACHE_DIR/ospray-$OSPRAY_VER/build/install &&
        export TBB_ROOT=$CACHE_DIR/ospray-$OSPRAY_VER/build/tbb/src/tbb &&
        cmake -L -S . -B build -DENABLE_OPENIMAGEIO=OFF -DENABLE_OPENVDB=OFF -DENABLE_EXR=OFF &&
        echo "Done: Configure OSPRay Studio"
      build: cmake --build build

  binary-analysis:
    needs:
      - release-linux
      - release-macos
      - release-windows
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/binary_analysis.yml@main
    with:
      project: ospray_studio
      artifact-in-linux: release-linux
      artifact-in-macos: release-macos
      artifact-in-windows: release-windows
      path: build*/package/ospray_studio*

  antivirus-scan:
    needs:
      - release-linux
      - release-macos
      - release-windows
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/antivirus_scan.yml@main
    with:
      project: ospray_studio
      artifact-in-linux: release-linux
      artifact-in-macos: release-macos
      artifact-in-windows: release-windows
      path: build*/package/ospray_studio*
